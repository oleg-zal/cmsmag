<?php

namespace core\user\controllers;

use core\base\models\UserModel;
use core\user\helpers\ValidationHelper;

class OrdersController extends BaseUser
{
    use ValidationHelper;
    protected $delivery = [];
    protected $payments = [];
    protected function inputData()
    {
        parent::inputData(); // TODO: Change the autogenerated stub
        if ($this->isPost()) {
            $this->delivery = $this->model->get('delivery');
            $this->payments = $this->model->get('payments');
            $this->order();
        }
    }
    protected function order() {
        if (empty($this->cart['goods']) || empty($_POST)) {
            $this->sendError('Отсутствуют данные для оформления заказа');
        }
        $validation = [
            'name' => [
                'translate' => 'Ваше имя',
                'methods' => ['emptyField']
            ],
            'phone' => [
                'translate' => 'Телефон',
                'methods' => ['emptyField', 'phoneField', 'numericField']
            ],
            'email' => [
                'translate' => 'E-mail',
                'methods' => ['emptyField', 'emailField']
            ],
            'delivery_id' => [
                'translate' => 'Способ доставки',
                'methods' => ['emptyField', 'numericField']
            ],
            'payments_id' => [
                'translate' => 'Способ оплаты',
                'methods' => ['emptyField', 'numericField']
            ],
        ];
        $order = [];
        $visitor = [];
        $columnsOrders = $this->model->showColumns('orders ');
        $columnsVisitors = $this->model->showColumns('visitors');
        foreach ($_POST as $key => $item) {
            if (!empty($validation[$key]['methods'])) {
                foreach ($validation[$key]['methods'] as $method) {
                    $_POST[$key] = $item = $this->$method($item, $validation[$key]['translate'] ?? $key);
                }
            }
            if ( !empty($columnsOrders[$key]) ) {
                $order[$key] = $item;
            }
            if ( !empty($columnsVisitors[$key]) ) {
                $visitor[$key] = $item;
            }
        }
        if ( empty($visitor['email']) && empty($visitorT['phone']) ) {
            $this->sendError('Отсутствуют данные пользователя для оформления заказа');
        }
        $visitorWhere = $visitorContition = [];
        if ( !empty($visitor['email']) && !empty($visitor['phone']) ) {
            $visitorWhere = [
                'email' => $visitor['email'],
                'phone' => $visitor['phone']
            ];
            $visitorContition = ['OR'];
        }
        else {
            $visitorKey = !empty($visitor['email']) ? 'email' : 'phone';
            $visitorWhere[$visitorKey] = $visitor[$visitorKey];
        }
        $resVisitor = $this->model->get('visitors', [
            'where' => $visitorWhere,
            'condition' => $visitorContition,
            'limit' => 1
        ]);
        if ($resVisitor) {
            $resVisitor = $resVisitor[0];
            $order['visitors_id'] = $resVisitor['id'];
        }
        else {
            $order['visitors_id'] = $this->model->add('visitors', [
                'fields' => $visitor,
                'return_id' => true
            ]);
        }
        $order['total_sum'] = $this->cart['total_sum'];
        $order['total_qty'] = $this->cart['total_qty'];
        $order['total_old_sum'] = $this->cart['total_old_sum'];
        $baseStatus = $this->model->get('orders_statuses', [
            'field' => ['id'],
            'order' => ['menu_position'],
            'limit' => 1
        ]);
        $baseStatus && $order['orders_statuses_id'] = $baseStatus[0]['id'];
        $order['id'] = $this->model->add('orders', [
            'fields' => $order,
            'return_id' => true
        ]);
        if (!$order['id']) {
            $this->sendError('Ошибка сохранения заказа. Свяжитесь с администрацией сайта по тел. ' . $this->set['phone']);
        }
        if (!$resVisitor) {
            UserModel::instance()->checkUser($order['visitors_id']);
        }
        if ( !$this->setOrdersGoods($order) ) {
            $this->sendError('Ошибка сохранения товаров заказа. Обратитесь к администрации');
        }
        $this->sendSuccess('Спасибо за заказ. Наши менеджеры свяжутся с Вами');
        $this->sendOrderEmail(['order' => $order, 'visitor' => $visitor]);
        $this->clearCart();
        $this->redirect();
    }
    protected function setOrdersGoods(array $order) {
        if (in_array('orders_goods', $this->model->showTables())) {
            $ordersGoods = [];
            $ordersGoodsColumns = $this->model->showColumns('orders_goods');
            foreach ($this->cart['goods'] as $key => $item) {
                $ordersGoods[$key]['orders_id'] = $order['id'];
                foreach ($item as $field => $value) {
                    if ( !empty($ordersGoodsColumns[$field]) ) {
                        if ( $ordersGoodsColumns['id_row'] === $field ) {
                            if ($ordersGoodsColumns['goods_id']) {
                                $ordersGoods[$key]['goods_id'] = $value;
                            }
                        }
                        else {
                            $ordersGoods[$key][$field] = $value;
                        }
                    }
                }
            }
            return $this->model->add('orders_goods', [
                'fields' => $ordersGoods
            ]);
        }
        return false;
    }
    protected function sendOrderEmail(array $orderData) {

    }
}