<?php

namespace core\user\controllers;

use core\base\exceptions\RouteException;
use core\base\models\UserModel;
use core\user\helpers\ValidationHelper;

class LoginController extends BaseUser
{
    use ValidationHelper;
    protected function inputData()
    {
        parent::inputData(); // TODO: Change the autogenerated stub
        if ( !empty($this->parameters['alias']) ) {
            switch ($this->parameters['alias']) {
                case 'registration':
                    $this->registration();
                    break;
                case 'login':
                    $this->login();
                    break;
                case 'logout':
                    UserModel::instance()->logout();
                    $this->redirect(PATH);
            }
        }
        throw new RouteException('Такой страницы не существует');
    }
    protected function registration() {
        if ( !$this->isPost() ) {
            throw new RouteException('Такой страницы не существует');
        }
        $_POST['password'] = trim( $_POST['password'] ?? '');
        $_POST['confirm_password'] = trim( $_POST['confirm_password'] ?? '');
        if ( $this->userData && !$_POST['password'] ) {
            unset($_POST['password']);
        }
        elseif ( !$this->userData && !$_POST['password'] ) {
            $this->sendError('Заполните поле ПАРОЛЬ');
        }
        if ( isset($_POST['password']) && $_POST['password'] !== $_POST['confirm_password'] ) {
            $this->sendError('Пароли не совпадают');
        }
        unset( $_POST['confirm_password'] );
        $validation = [
            'name' => [
                'translate' => 'Ваше имя',
                'methods' => ['emptyField']
            ],
            'phone' => [
                'translate' => 'Телефон',
                'methods' => ['emptyField', 'phoneField', 'numericField']
            ],
            'email' => [
                'translate' => 'E-mail',
                'methods' => ['emptyField', 'emailField']
            ]
        ];
        foreach ($_POST as $key => $item) {
            if (!empty($validation[$key]['methods'])) {
                foreach ($validation[$key]['methods'] as $method) {
                    $_POST[$key] = $item = $this->$method($item, $validation[$key]['translate'] ?? $key);
                }
            }
        }
        $where = [
            'phone' =>$_POST['phone'],
            'email' =>$_POST['email']
        ];
        $condition[] = 'OR';
        $res = $this->model->get('visitors', [
            'where' => $where,
            'condition' => $condition,
            'limit' => 1
        ]);
        if ($res) {
            $res = $res[0];
            if (empty($this->userData) || $this->userData['id'] !== $res['id']) {
                $field = $res['phone'] === $_POST['phone'] ? 'телефон' : 'email';
                $this->sendError("Такой $field уже зарегистрирован");
            }
        }
        if ( !empty($_POST['password']) ) {
            $_POST['password'] = md5( $_POST['password'] );
        }
        if ($this->userData) {
            $this->model->edit('visitors', [
                'where' => ['id' => $this->userData['id']]
            ]);
            $id = $this->userData['id'];
        }
        else {
            $id = $this->model->add('visitors', [
                'return_id' => true
            ]);
        }

        if ( !empty($id) ) {
            if (UserModel::instance()->checkUser($id)) {
                $message = !$this->userData ?
                    "Спасибо за регистрацию {$_POST['name']}" :
                    'Данные успешно изменены';
                $this->sendSuccess($message);
            }
        }
        $this->sendError('Произошла внутренняя ошибка. Свяжитесь с администрацией сайта');

    }
    protected function login() {
        $login = $this->clearStr($_POST['login'] ?? '');
        $password = $this->clearStr($_POST['password'] ?? '');
        if (!$login || !$password) {
            $this->sendError('Заполните поля для авторизации');
        }
        $password = md5($password);
        $res = $this->model->get('visitors', [
            'where' => ['email' => $login, 'password' => $password],
            'limit' => 1
        ]);
        if (!$res) {
            $this->sendError('Некорректные данные для входа');
        }
        if ( UserModel::instance()->checkUser($res[0]['id']) ) {
            $this->sendSuccess('Добро пожаловать ' . $res[0]['name']);
        }
        $this->sendError('Произошла внутренняя ошибка при авторизации.');
    }
}